<?php

/**
 * @file
 *  Preprocess and theme hook functions.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Render\Element;
use Drupal\image\ImageStyleInterface;

/**
 * Implements hook_theme().
 */
function field_slideshow_theme() {
  return array(
    'field_slideshow' => array(
      'variables'     => array(
        'items'                 => NULL,
        'item_settings'         => array(),
        'image_style'           => NULL,
        'image'                 => NULL,
        'order'                 => NULL,
        'controls'              => NULL,
        'controls_pause'        => NULL,
        'controls_position'     => NULL,
        'pager'                 => NULL,
        'pager_position'        => NULL,
        'pager_image_style'     => NULL,
        'carousel_image_style'  => NULL,
        'entity'                => NULL,
        'breakpoints'           => NULL,
        'slideshow_id'          => NULL,
        'js_variables'          => array(),
      ),
      'path' => drupal_get_path('module', 'field_slideshow') . '/templates',
      'render element'     => 'field_slideshow',
    ),
    'field_slideshow_controls' => array(
      'variables'    => array(
        'slideshow_id'          => NULL,
        'controls_pause'        => NULL,
      ),
      'path' => drupal_get_path('module', 'field_slideshow') . '/templates',
      'render element'     => 'field_slideshow_controls',
    ),
    'field_slideshow_pager' => array(
      'variables'    => array(
        'items'                 => NULL,
        'pager'                 => NULL,
        'pager_image_style'     => NULL,
        'carousel_image_style'  => NULL,
        'slideshow_id'          => NULL,
        'carousel_skin'         => NULL,
      ),
      'path' => drupal_get_path('module', 'field_slideshow') . '/templates',
      'render element'     => 'field_slideshow_pager',
    ),
  );
}

/**
 * Implements template_preprocess().
 */
function template_preprocess_field_slideshow(&$variables) {

  $item = $variables['items'];

  // Loop over items and prepare links.
  foreach ($variables['items'] as $key => $value) {
    foreach ($variables['item_settings'] as $item_key => $item_val) {
      if ($item_val['path'] == '') {
       $variables['url'][$item_key]['path'] = '';
      } 
      elseif ($item_val['path']->isExternal() == TRUE) {
        $variables['url'][$item_key]['path'] = $item_val['path']->getUri();
      } 
      elseif ($item_val['path']->isExternal() == FALSE) {
        $variables['url'][$item_key]['path'] = $item_val['path']->getOptions()['entity']->url();
      }

      if($item_val['caption_path'] == '') {
        $variables['caption_url'][$item_key]['path'] = '';
      } 
      elseif ($item_val['caption_path']->isExternal() == TRUE) {
        $variables['caption_url'][$item_key]['path'] = $item_val['caption_path']->getUri();
      } 
      elseif ($item_val['caption_path']->isExternal() == FALSE) {
        $variables['caption_url'][$item_key]['path'] = $item_val['caption_path']->getOptions()['entity']->url();
      }
    }
  }


  // // Add the JQuery plugins and the JS code
  $libraries_module_exists = \Drupal::moduleHandler()->moduleExists('libraries');
  if ($libraries_module_exists) {
    $libraries_path = DRUPAL_ROOT . '/libraries';
    if (file_exists($libraries_path . '/jquery.cycle/jquery.cycle.all.min.js')) {
      $variables['#attached']['library'][] = 'field_slideshow/field_slideshow.jquery.cycle.min';
    }
    elseif (file_exists($libraries_path . '/jquery.cycle/jquery.cycle.all.js')) {
      $variables['#attached']['library'][] = 'field_slideshow/field_slideshow.jquery.cycle.all';
    }
    // Add js variables
    $js_variables = $variables["js_variables"];
    $variables['#attached']['library'][] = 'field_slideshow/field_slideshow.view';
    $variables['#attached']['drupalSettings']['field_slideshow'] = array(
      'field-slideshow-' . $variables['slideshow_id'] => $js_variables,
    );
  }

  // @todo: Need to find how to reverse the array of objects.
  // // Change order if needed
  // if (isset($variables['order'])) {
  //   if ($variables['order'] == 'reverse') $variables['items'] = array_reverse($variables['items']);
  //   elseif ($variables['order'] == 'random') shuffle($variables['items']);
  // }

  // Generate slides
  $field_slideshow_zebra = 'odd';
  $variables['slides_max_width'] = 0;
  $variables['slides_max_height'] = 0;
  $slide_theme = (isset($variables['breakpoints']) && isset($variables['breakpoints']['mapping']) && !empty($variables['breakpoints']['mapping'])) ? 'picture' : 'image_style';
  $variables['slide'] = array();
  $variables['slides_max_width'] = 0;
  $variables['slides_max_height'] = 0;
  
  foreach ($variables['items'] as $num => $item) {
    $variables['image'][$num]['#item_attributes'] = array_merge(
      $variables['image'][$num]['#item_attributes'], array(
        'class'=> 'field-slideshow-image field-slideshow-image-' . (1 + $num)
      )
    );

    // Generate classes
    
    $field_slideshow_zebra = ($field_slideshow_zebra == 'odd') ? 'even' : 'odd';
    $classes[] = $field_slideshow_zebra;
    if ($num == 0) $classes[] = 'first';
    elseif ($num == count($variables['items']) - 1) $classes[] = 'last';
    $variables['slide'][$num]['classes'] = implode(' ', $classes);
  }

  // Don't add controls if there's only one image
  if (count($variables['items']) == 1) {
    $variables['controls'] = '';
    $variables['pager'] = '';
  }
}

/**
 * Implements template_preprocess().
 */
function template_preprocess_field_slideshow_pager(&$variables) {
  // Add thumbnails pager/carousel if needed
  if (isset($variables['pager']) && ($variables['pager'] == 'image' || $variables['pager'] == 'carousel')) {

    if ($variables['pager'] == 'carousel') {
      $thumbnail_style = $variables['carousel_image_style'];
      //$path = libraries_get_path('jquery.jcarousel');
      $path = DRUPAL_ROOT . '/libraries/jquery.jcarousel';
      if (isset($variables['carousel_skin']) && $variables['carousel_skin']) {
        $variables['#attached']['library'][] = 'field_slideshow/field_slideshow.field_slideshow.jquery.carousel.skin.' . $variables['carousel_skin'];
      }
    }
    else {
      $thumbnail_style = $variables['pager_image_style'];
    }

    $thumbnails = array();
    foreach ($variables['items'] as $num => $item) {
      $thumbnail = array();

      $thumbnail['path'] = $item->entity->getFileUri();
      $thumbnail['attributes'] = $item->_attributes;
      $thumbnail['attributes']['class'] = array(
        'field-slideshow-thumbnail', 
        'field-slideshow-thumbnail-' . (1 + $num),
      );
      $thumbnail['alt'] = isset($item->alt) ? $item->alt : '';
      if (isset($item->width) && isset($item->height)) {
        $thumbnail['width'] = $item->width;
        $thumbnail['height'] = $item->height;
      }
      else {
        $thumbnail_dims = getimagesize($thumbnail['path']);
        $thumbnail['width'] = $thumbnail_dims[0];
        $thumbnail['height'] = $thumbnail_dims[1];
      }
      if (isset($item->title) && strlen($item->title) > 0) {
        $thumbnail['title'] = $item->title;
      }
      // @todo: need to add cache tags in image.
      $thumbnail_output = array(
        '#theme'           => 'image_formatter',
        '#item'            => $item,
        '#item_attributes' => $thumbnail['attributes'],
        '#url'             => "#",
      );
      if ($thumbnail_style) {
        $thumbnail_output['#image_style'] = $thumbnail_style;
      }
      
      $thumbnails[] = $thumbnail_output;
    }

    $variables['thumbnails'] = array(
      '#theme'      => 'item_list',
      '#items'       => $thumbnails,
      '#attributes'  => array(
        'id'    => 'field-slideshow-' . $variables['slideshow_id'] . '-pager',
        'class' => 'field-slideshow-pager slides-' . count($variables['items']),
      ),
    );
  }
  $variables['items_count'] = count($variables['items']);
}